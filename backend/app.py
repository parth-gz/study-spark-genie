from flask import Flask, request, jsonify
from flask_cors import CORS
import os
import google.generativeai as genai
import PyPDF2

app = Flask(__name__)
CORS(app, resources={r"/api/*": {"origins": "*"}})  # Enable CORS for all routes with more specific configuration

# Initialize Gemini API with your API key
# Replace this with your actual API key or set it as an environment variable
gemini_api_key = "abcd"  # You mentioned you would replace this with your key
genai.configure(api_key=gemini_api_key)

@app.route('/api/chat', methods=['POST'])
def chat():
    """
    Process a chat message and return an AI response using Gemini
    """
    print("Received chat request")
    data = request.json
    user_message = data.get('message', '')
    settings = data.get('settings', {})
    
    print(f"Processing message: {user_message}")
    
    # Process with Gemini API
    response = get_gemini_response(user_message, settings)
    print(f"Generated response: {response}")
    
    return jsonify(response)

@app.route('/api/upload', methods=['POST'])
def upload_pdf():
    """
    Handle PDF uploads and process them for RAG
    """
    if 'file' not in request.files:
        return jsonify({'error': 'No file part'}), 400
        
    file = request.files['file']
    
    if file.filename == '':
        return jsonify({'error': 'No selected file'}), 400
        
    if file and file.filename.endswith('.pdf'):
        # Save file temporarily
        filename = file.filename
        file_path = os.path.join('temp_uploads', filename)
        os.makedirs('temp_uploads', exist_ok=True)
        file.save(file_path)
        
        # Extract text from PDF
        pdf_text = extract_text_from_pdf(file_path)
        pdf_id = f"pdf-{os.urandom(4).hex()}"
        
        # In a real implementation, you would store this text for RAG
        
        return jsonify({
            'id': pdf_id,
            'name': filename,
            'size': os.path.getsize(file_path),
            'lastModified': os.path.getmtime(file_path)
        })
    
    return jsonify({'error': 'File must be a PDF'}), 400

@app.route('/api/export', methods=['POST'])
def export_conversation():
    """
    Export a conversation to a file
    """
    data = request.json
    messages = data.get('messages', [])
    
    # In a real implementation, this would generate a PDF or other format
    # For now, we'll just acknowledge the request
    return jsonify({'success': True, 'message': 'Export successful'})

def get_gemini_response(question, settings):
    """
    Generate a response using the Gemini model
    """
    # Create an ID for this message
    response_id = f'ai-{os.urandom(4).hex()}'
    
    try:
        print("Configuring Gemini model")
        # Configure the model based on settings
        model = genai.GenerativeModel('gemini-1.5-pro-latest')
        
        # Create a system prompt based on settings
        system_prompt = "You are a helpful study assistant that provides accurate, educational responses."
        
        if settings.get('simplifiedAnswers', False):
            system_prompt += " Provide simplified explanations suitable for beginners."
        
        if settings.get('stepByStepSolutions', True):
            system_prompt += " Break down complex concepts into clear step-by-step explanations."
        
        print(f"Using system prompt: {system_prompt}")
        
        # Generate the response
        chat = model.start_chat(history=[])
        gemini_response = chat.send_message([
            {"text": system_prompt, "role": "model"},
            {"text": question, "role": "user"}
        ])
        
        content = gemini_response.text
        print(f"Received content from Gemini: {content[:100]}...")  # Print first 100 chars for debug
        
        # Structure the response to match frontend expectations
        response = {
            'id': response_id,
            'type': 'ai',
            'content': content,
            'timestamp': '',
        }
        
        # Generate steps if the setting is enabled
        if settings.get('stepByStepSolutions', True):
            # Extract steps from the content - in a real implementation
            # you might use more sophisticated parsing or ask the model directly for steps
            steps = extract_steps_from_content(content)
            if steps:
                response['steps'] = steps
        
        # Add sources if the setting is enabled
        if settings.get('showSources', True):
            # In a real implementation, you'd retrieve actual sources
            response['sources'] = [
                {"title": "Generated by Gemini 1.5 Pro", "url": "https://ai.google.dev/", "description": "AI-generated content"}
            ]
            
        return response
        
    except Exception as e:
        print(f"Error with Gemini API: {e}")
        # Fallback response
        return {
            'id': response_id,
            'type': 'ai',
            'content': f"I encountered an error while processing your request. Error details: {str(e)}",
            'timestamp': '',
        }

def extract_steps_from_content(content):
    """
    Simple function to try to extract steps from the content
    In a real implementation, you might use a more sophisticated approach
    or directly ask the model to format its response with steps
    """
    lines = content.split('\n')
    steps = []
    
    for line in lines:
        # Look for numbered lines or lines starting with common step indicators
        if (line.strip().startswith(('1.', '2.', '3.', '4.', '5.', 'Step 1', 'Step 2', 'First', 'Second'))):
            # Clean up the step text
            step_text = line.strip().split('.', 1)[-1].strip()
            if step_text and len(steps) < 5:  # Limit to 5 steps
                steps.append(step_text)
    
    return steps

def extract_text_from_pdf(file_path):
    """
    Extract text content from a PDF file
    """
    text = ""
    try:
        with open(file_path, 'rb') as file:
            reader = PyPDF2.PdfReader(file)
            for page_num in range(len(reader.pages)):
                text += reader.pages[page_num].extract_text() + "\n"
    except Exception as e:
        print(f"Error extracting text from PDF: {e}")
    return text

def process_pdf(file_path, filename):
    """
    Process a PDF file to extract text
    """
    pdf_id = f"pdf-{os.urandom(4).hex()}"
    # Extract the text content
    text_content = extract_text_from_pdf(file_path)
    
    # Here we would store the text content for later use with RAG
    # This is a simplified implementation
    
    return pdf_id

if __name__ == '__main__':
    # Run on port 3001 to avoid conflicts with the frontend in development
    print("Starting Flask server on port 3001")
    app.run(debug=True, port=3001, host='0.0.0.0')
